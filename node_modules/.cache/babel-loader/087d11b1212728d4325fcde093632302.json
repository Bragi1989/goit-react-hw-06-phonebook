{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('contacts');\n    return serializedState ? JSON.parse(serializedState) : undefined;\n  } catch (error) {\n    console.error('Error loading state from localStorage:', error);\n    return undefined;\n  }\n};\nconst saveState = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('contacts', serializedState);\n  } catch (error) {\n    console.error('Error saving state to localStorage:', error);\n  }\n};\nconst contactsSlice = createSlice({\n  name: 'contacts',\n  initialState: loadState() || {\n    items: [],\n    filter: ''\n  },\n  reducers: {\n    addContact: (state, action) => {\n      const {\n        id,\n        name,\n        number\n      } = action.payload;\n      if (name && number) {\n        const existingContactIndex = state.items.findIndex(contact => contact.name.toLowerCase() === name.toLowerCase());\n        if (existingContactIndex === -1) {\n          state.items.push({\n            id,\n            name,\n            number\n          });\n        }\n      }\n      saveState(state);\n    },\n    deleteContact: (state, action) => {\n      state.items = state.items.filter(contact => contact.id !== action.payload);\n      saveState(state);\n    },\n    updateFilter: (state, action) => {\n      state.filter = action.payload;\n    },\n    clearContacts: state => {\n      state.items = [];\n      saveState(state);\n    }\n  }\n});\nconst {\n  actions,\n  reducer\n} = contactsSlice;\nexport const {\n  addContact,\n  deleteContact,\n  updateFilter,\n  clearContacts\n} = actions;\nexport default reducer;","map":{"version":3,"names":["createSlice","loadState","serializedState","localStorage","getItem","JSON","parse","undefined","error","console","saveState","state","stringify","setItem","contactsSlice","name","initialState","items","filter","reducers","addContact","action","id","number","payload","existingContactIndex","findIndex","contact","toLowerCase","push","deleteContact","updateFilter","clearContacts","actions","reducer"],"sources":["D:/GitHub/goit-react-hw-06-phonebook/src/components/redux/contactsSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('contacts');\r\n    return serializedState ? JSON.parse(serializedState) : undefined;\r\n  } catch (error) {\r\n    console.error('Error loading state from localStorage:', error);\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst saveState = (state) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem('contacts', serializedState);\r\n  } catch (error) {\r\n    console.error('Error saving state to localStorage:', error);\r\n  }\r\n};\r\n\r\nconst contactsSlice = createSlice({\r\n  name: 'contacts',\r\n  initialState: loadState() || {\r\n    items: [],\r\n    filter: '',\r\n  },\r\n  reducers: {\r\n    addContact: (state, action) => {\r\n      const { id, name, number } = action.payload;\r\n\r\n      if (name && number) {\r\n        const existingContactIndex = state.items.findIndex(\r\n          (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n        );\r\n\r\n        if (existingContactIndex === -1) {\r\n          state.items.push({ id, name, number });\r\n        }\r\n      }\r\n      saveState(state);\r\n    },\r\n    deleteContact: (state, action) => {\r\n      state.items = state.items.filter((contact) => contact.id !== action.payload);\r\n      saveState(state);\r\n    },\r\n    updateFilter: (state, action) => {\r\n      state.filter = action.payload;\r\n    },\r\n    clearContacts: (state) => {\r\n      state.items = [];\r\n      saveState(state);\r\n    },\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = contactsSlice;\r\nexport const { addContact, deleteContact, updateFilter, clearContacts } = actions;\r\nexport default reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACtB,IAAI;IACF,MAAMC,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACxD,OAAOF,eAAe,GAAGG,IAAI,CAACC,KAAK,CAACJ,eAAe,CAAC,GAAGK,SAAS;EAClE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,OAAOD,SAAS;EAClB;AACF,CAAC;AAED,MAAMG,SAAS,GAAIC,KAAK,IAAK;EAC3B,IAAI;IACF,MAAMT,eAAe,GAAGG,IAAI,CAACO,SAAS,CAACD,KAAK,CAAC;IAC7CR,YAAY,CAACU,OAAO,CAAC,UAAU,EAAEX,eAAe,CAAC;EACnD,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;EAC7D;AACF,CAAC;AAED,MAAMM,aAAa,GAAGd,WAAW,CAAC;EAChCe,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAEf,SAAS,CAAC,CAAC,IAAI;IAC3BgB,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE;EACV,CAAC;EACDC,QAAQ,EAAE;IACRC,UAAU,EAAEA,CAACT,KAAK,EAAEU,MAAM,KAAK;MAC7B,MAAM;QAAEC,EAAE;QAAEP,IAAI;QAAEQ;MAAO,CAAC,GAAGF,MAAM,CAACG,OAAO;MAE3C,IAAIT,IAAI,IAAIQ,MAAM,EAAE;QAClB,MAAME,oBAAoB,GAAGd,KAAK,CAACM,KAAK,CAACS,SAAS,CAC/CC,OAAO,IAAKA,OAAO,CAACZ,IAAI,CAACa,WAAW,CAAC,CAAC,KAAKb,IAAI,CAACa,WAAW,CAAC,CAC/D,CAAC;QAED,IAAIH,oBAAoB,KAAK,CAAC,CAAC,EAAE;UAC/Bd,KAAK,CAACM,KAAK,CAACY,IAAI,CAAC;YAAEP,EAAE;YAAEP,IAAI;YAAEQ;UAAO,CAAC,CAAC;QACxC;MACF;MACAb,SAAS,CAACC,KAAK,CAAC;IAClB,CAAC;IACDmB,aAAa,EAAEA,CAACnB,KAAK,EAAEU,MAAM,KAAK;MAChCV,KAAK,CAACM,KAAK,GAAGN,KAAK,CAACM,KAAK,CAACC,MAAM,CAAES,OAAO,IAAKA,OAAO,CAACL,EAAE,KAAKD,MAAM,CAACG,OAAO,CAAC;MAC5Ed,SAAS,CAACC,KAAK,CAAC;IAClB,CAAC;IACDoB,YAAY,EAAEA,CAACpB,KAAK,EAAEU,MAAM,KAAK;MAC/BV,KAAK,CAACO,MAAM,GAAGG,MAAM,CAACG,OAAO;IAC/B,CAAC;IACDQ,aAAa,EAAGrB,KAAK,IAAK;MACxBA,KAAK,CAACM,KAAK,GAAG,EAAE;MAChBP,SAAS,CAACC,KAAK,CAAC;IAClB;EACF;AACF,CAAC,CAAC;AAEF,MAAM;EAAEsB,OAAO;EAAEC;AAAQ,CAAC,GAAGpB,aAAa;AAC1C,OAAO,MAAM;EAAEM,UAAU;EAAEU,aAAa;EAAEC,YAAY;EAAEC;AAAc,CAAC,GAAGC,OAAO;AACjF,eAAeC,OAAO"},"metadata":{},"sourceType":"module"}